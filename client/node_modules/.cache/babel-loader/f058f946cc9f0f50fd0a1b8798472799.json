{"ast":null,"code":"import _slicedToArray from \"/home/usuario/codeableorg/react-discord-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/usuario/codeableorg/react-discord-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/usuario/codeableorg/react-discord-clone/client/src/App.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: grid;\\n  margin: 0;\\n  height: 100vh;\\n  width: 100vw;\\n  overflow: hidden;\\n  font-family: \\\"Whitney\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n  grid-template: 48px 1fr 65px/ 300px 1fr;\\n  grid-template-areas:\\n    \\\"app-name header\\\"\\n    \\\"channels list-message\\\"\\n    \\\"channels new-message\\\";\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { css } from \"emotion\";\nimport { useLocalStorage } from \"./utils/hooks\";\nimport AppName from \"./AppName\";\nimport Channels from \"./channels/Channels\";\nimport Header from \"./Header\";\nimport ListMessages from \"./ListMessages\";\nimport NewMessage from \"./NewMessage\";\nconst container = css(_templateObject());\n\nfunction App({\n  url = \"ws://localhost:4000\",\n  currentUser\n}) {\n  const ws = React.useRef(null);\n\n  const _React$useState = React.useState(1000000000000),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        channelId = _React$useState2[0],\n        setChannelId = _React$useState2[1]; // for channel active\n\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        connected = _React$useState4[0],\n        setConnected = _React$useState4[1];\n\n  const _useLocalStorage = useLocalStorage(\"channels\", []),\n        _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n        channels = _useLocalStorage2[0],\n        setChannels = _useLocalStorage2[1]; // list channels\n\n\n  const _useLocalStorage3 = useLocalStorage(\"users\", []),\n        _useLocalStorage4 = _slicedToArray(_useLocalStorage3, 2),\n        users = _useLocalStorage4[0],\n        setUsers = _useLocalStorage4[1]; // list users\n\n\n  React.useEffect(() => {\n    const server = new WebSocket(url);\n    ws.current = server;\n    return () => {\n      ws.current = null;\n      server.close();\n    };\n  }, [url]);\n  React.useEffect(() => {\n    if (connected && !channelActive().joined) {\n      sendData(\"\".concat(currentUser.username, \" joined\"));\n      const updateChannels = channels.map(channel => {\n        if (channel.id === channelId) channel.joined = true;\n        return channel;\n      });\n      setChannels(updateChannels);\n    }\n  }, [channelId, connected]);\n  React.useEffect(() => {// here send data when channel is created\n  }, [channels]);\n  React.useEffect(() => {\n    if (ws.current) {\n      ws.current.onopen = () => {\n        console.log(\"open\");\n        setConnected(true);\n      };\n\n      ws.current.onclose = () => {\n        console.log(\"close\");\n        setConnected(false);\n      };\n\n      ws.current.onmessage = ({\n        data\n      }) => {\n        const updateChannels = channels.map(channel => {\n          if (channel.id === channelId) {\n            channel.messages.push(JSON.parse(data));\n          }\n\n          return channel;\n        });\n        setChannels(updateChannels);\n      };\n    }\n  }, [ws.current]);\n\n  function sendData(content, type = \"message\") {\n    ws.current.send(JSON.stringify({\n      id: new Date().getTime(),\n      content: content,\n      date: new Date(),\n      type\n    }));\n  }\n\n  function channelActive() {\n    return channels.find(channel => channel.id === channelId);\n  }\n\n  return React.createElement(\"div\", {\n    className: container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(AppName, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(Channels, {\n    currentUser: currentUser,\n    setChannels: setChannels,\n    channels: channels,\n    channelId: channelId,\n    setChannelId: setChannelId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(ListMessages, {\n    messages: channelActive().messages,\n    currentUser: currentUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(NewMessage, {\n    sendData: sendData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/usuario/codeableorg/react-discord-clone/client/src/App.js"],"names":["React","css","useLocalStorage","AppName","Channels","Header","ListMessages","NewMessage","container","App","url","currentUser","ws","useRef","useState","channelId","setChannelId","connected","setConnected","channels","setChannels","users","setUsers","useEffect","server","WebSocket","current","close","channelActive","joined","sendData","username","updateChannels","map","channel","id","onopen","console","log","onclose","onmessage","data","messages","push","JSON","parse","content","type","send","stringify","Date","getTime","date","find"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\n\nimport { useLocalStorage } from \"./utils/hooks\";\nimport AppName from \"./AppName\";\nimport Channels from \"./channels/Channels\";\nimport Header from \"./Header\";\nimport ListMessages from \"./ListMessages\";\nimport NewMessage from \"./NewMessage\";\n\nconst container = css`\n  display: grid;\n  margin: 0;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n  font-family: \"Whitney\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  grid-template: 48px 1fr 65px/ 300px 1fr;\n  grid-template-areas:\n    \"app-name header\"\n    \"channels list-message\"\n    \"channels new-message\";\n`;\n\nfunction App({ url = \"ws://localhost:4000\", currentUser }) {\n  const ws = React.useRef(null);\n  const [channelId, setChannelId] = React.useState(1000000000000); // for channel active\n  const [connected, setConnected] = React.useState(false);\n  const [channels, setChannels] = useLocalStorage(\"channels\", []); // list channels\n  const [users, setUsers] = useLocalStorage(\"users\", []); // list users\n\n  React.useEffect(() => {\n    const server = new WebSocket(url);\n    ws.current = server;\n    return () => {\n      ws.current = null;\n      server.close();\n    };\n  }, [url]);\n\n  React.useEffect(() => {\n    if (connected && !channelActive().joined) {\n      sendData(`${currentUser.username} joined`);\n      const updateChannels = channels.map(channel => {\n        if (channel.id === channelId) channel.joined = true;\n        return channel;\n      });\n      setChannels(updateChannels);\n    }\n  }, [channelId, connected]);\n\n  React.useEffect(() => {\n    // here send data when channel is created\n  }, [channels]);\n\n  React.useEffect(() => {\n    if (ws.current) {\n      ws.current.onopen = () => {\n        console.log(\"open\");\n        setConnected(true);\n      };\n      ws.current.onclose = () => {\n        console.log(\"close\");\n        setConnected(false);\n      };\n      ws.current.onmessage = ({ data }) => {\n        const updateChannels = channels.map(channel => {\n          if (channel.id === channelId) {\n            channel.messages.push(JSON.parse(data));\n          }\n          return channel;\n        });\n        setChannels(updateChannels);\n      };\n    }\n  }, [ws.current]);\n\n  function sendData(content, type = \"message\") {\n    ws.current.send(\n      JSON.stringify({\n        id: new Date().getTime(),\n        content: content,\n        date: new Date(),\n        type\n      })\n    );\n  }\n\n  function channelActive() {\n    return channels.find(channel => channel.id === channelId);\n  }\n\n  return (\n    <div className={container}>\n      <AppName />\n      <Header />\n      <Channels\n        currentUser={currentUser}\n        setChannels={setChannels}\n        channels={channels}\n        channelId={channelId}\n        setChannelId={setChannelId}\n      />\n      <ListMessages\n        messages={channelActive().messages}\n        currentUser={currentUser}\n      />\n      <NewMessage sendData={sendData} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}