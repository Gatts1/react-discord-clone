{"ast":null,"code":"import _slicedToArray from \"/home/usuario/codeableorg/react-discord-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const _useState = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        storedValue = _useState2[0],\n        setStoredValue = _useState2[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport { useLocalStorage };","map":{"version":3,"sources":["/home/usuario/codeableorg/react-discord-clone/client/src/utils/hooks.js"],"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAC1C;AACA;AAF0C,oBAGJH,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACD,KALD,CAKE,OAAOO,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOP,YAAP;AACD;AACF,GAX6C,CAHJ;AAAA;AAAA,QAGnCU,WAHmC;AAAA,QAGtBC,cAHsB,kBAgB1C;AACA;;;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAI;AACF;AACA,YAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAIF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CALE,CAMF;;AACAZ,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BjB,GAA5B,EAAiCM,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOP,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;;AAeA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD;;AAED,SAASd,eAAT","sourcesContent":["import { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport { useLocalStorage };\n"]},"metadata":{},"sourceType":"module"}